version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ml_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-ml_pipeline}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:?Database password is required}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ml_network

  # MLflow Tracking Server
  mlflow:
    image: python:3.12-slim
    container_name: ml_mlflow
    command: >
      bash -c "
        pip install mlflow[extras] psycopg2-binary boto3 &&
        mlflow server
        --backend-store-uri postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-password}@postgres:5432/${DB_NAME:-ml_pipeline}
        --default-artifact-root ./mlruns
        --host 0.0.0.0
        --port 5000
      "
    ports:
      - "${MLFLOW_PORT:-5001}:5000"
    volumes:
      - mlflow_data:/app/mlruns
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_DEFAULT_REGION=${AWS_REGION:-us-west-2}
    networks:
      - ml_network
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import urllib.request; urllib.request.urlopen(\"http://localhost:5000\"); print(\"OK\")'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ML API Service
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: ml_api
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-ml_pipeline}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MODEL_NAME=${MODEL_NAME:-distilbert-base-uncased}
      - MAX_LENGTH=${MAX_LENGTH:-512}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      mlflow:
        condition: service_healthy
    networks:
      - ml_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Training Service (run on-demand)
  training:
    build:
      context: .
      dockerfile: docker/Dockerfile.training
    container_name: ml_training
    profiles:
      - training  # Only start with --profile training
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-ml_pipeline}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MODEL_NAME=${MODEL_NAME:-distilbert-base-uncased}
      - BATCH_SIZE=${BATCH_SIZE:-16}
      - NUM_EPOCHS=${NUM_EPOCHS:-3}
      - LEARNING_RATE=${LEARNING_RATE:-2e-5}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./logs:/app/logs
      - huggingface_cache:/root/.cache/huggingface
    depends_on:
      postgres:
        condition: service_healthy
      mlflow:
        condition: service_healthy
    networks:
      - ml_network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: ml_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - ml_network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: ml_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - ml_network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: ml_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - ml_network

volumes:
  postgres_data:
    driver: local
  mlflow_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local
  huggingface_cache:
    driver: local

networks:
  ml_network:
    driver: bridge